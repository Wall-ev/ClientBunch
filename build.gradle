buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = "${mod_name}-Forge-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


if (lljij.toBoolean()) {

    reobf {
        jarJar {}
    }

    tasks.jarJar.finalizedBy('reobfJarJar')

    tasks.jarJar.configure {
        archiveClassifier.set('')
    }

    jar {
        archiveClassifier.set('slim')
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    if (rootMod.toBoolean()) {
        implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
            transitive = false
            jarJar.ranged(it, "[${mixin_extras_version},)")
        }
    } else {
        implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
//    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
//    if (rootMod.toBoolean()) {
//        jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[MC1.20,MC1.21)")
//    }
}


repositories {
    flatDir {
        dir 'libs'
    }
    maven { url 'https://jitpack.io' }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    maven {
        url "https://maven.shedaniel.me/"
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
//    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // api
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    runtimeOnly fg.deobf("curse.maven:kiwi-303657:${kiwi_file_id}")

//    implementation fg.deobf("curse.maven:quark-243121:${quark_file_id}")
    runtimeOnly fg.deobf("curse.maven:quark-243121:5594847")
    runtimeOnly fg.deobf("curse.maven:zeta-968868:5597406")
    //    implementation fg.deobf("curse.maven:citadel-331936:${citadel_file_id}")

    implementation fg.deobf("curse.maven:farmers-delight-398521:${farmers_delight_file_id}")
    implementation fg.deobf("curse.maven:miners-delight-plus-689630:${miners_delight_plus_file_id}")
//    implementation fg.deobf("curse.maven:youkais-homecoming-957437:${ykhc_file_id}")
    compileOnly fg.deobf(jarJar("com.tterrag.registrate:Registrate:${registrate_version}")){
        transitive = false
        jarJar.ranged(it, "[MC1.20-1.3.11,)")
    }

    implementation fg.deobf("curse.maven:caupona-656147:${caupona_file_id}")
    implementation fg.deobf("curse.maven:convivium-905776:${convivium_file_id}")
    implementation fg.deobf("curse.maven:kitchen-karrot-880555:${kitchen_karrot_file_id}")
    // 烹饪锅

    implementation fg.deobf("curse.maven:drink-beer-refill-729120:${drink_beer_refill_file_id}")

    implementation fg.deobf("curse.maven:create-328085:${create_file_id}")

    implementation fg.deobf("curse.maven:puzzles-lib-495476:5783607")
    implementation fg.deobf("curse.maven:new-effect-descriptions-891326:4706348")

    implementation fg.deobf("maven.modrinth:smooth-swapping-forge-updated:0.9.2")


    implementation fg.deobf("curse.maven:appleskin-248787:4770828")
//    implementation fg.deobf("maven.modrinth:appleskin:xcauwnEB")
//    implementation fg.deobf("maven.modrinth:expanded-storage:10.0.0-beta.3+forge")
//    implementation fg.deobf("curse.maven:serene-seasons-291874:4761603")
//    implementation fg.deobf("curse.maven:spice-of-life-carrot-edition-277616:4650707")
//    implementation fg.deobf("curse.maven:eccentric-tome-597522:4853031")

    implementation fg.deobf("curse.maven:simple-farming-327554:${simple_farming_file_id}")
    implementation fg.deobf("curse.maven:lets-do-brewery-971636:${lets_do_brewery_file_id}")
    implementation fg.deobf("curse.maven:lets-do-herbal-brews-951221:${lets_do_herbal_brews_file_id}")
    implementation fg.deobf("curse.maven:lets-do-candlelight-846962:${lets_do_candlelight_file_id}")
    implementation fg.deobf("curse.maven:lets-do-beachparty-858691:${lets_do_beachparty_file_id}")
    implementation fg.deobf("curse.maven:lets-do-bakery-886559:${lets_do_bakery_file_id}")
    implementation fg.deobf("curse.maven:vinery-704465:${vinery_file_id}")
    implementation fg.deobf("curse.maven:do-api-864599:${do_api_file_id}")
//    implementation fg.deobf("curse.maven:fruit-stack-900231:4807247")

    compileOnly fg.deobf("curse.maven:obscure-tooltips-715660:4686579")
    implementation fg.deobf("curse.maven:modern-ui-352491:5724639")

    implementation fg.deobf("curse.maven:iceberg-520110:5838149")
    implementation fg.deobf("curse.maven:prism-lib-638111:4650325")
    implementation fg.deobf("curse.maven:legendary-tooltips-532127:4662781")


    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")



//    implementation fg.deobf("curse.maven:sawmill-964817:${sawmill_file_id}")

    implementation fg.deobf("dev.xkmc.l2library:l2library:${l2library_version}-slim")
    implementation fg.deobf("dev.xkmc.l2serial:l2serial:1.2.2")
    implementation fg.deobf("dev.xkmc.l2tabs:l2tabs:0.3.2")
    implementation fg.deobf(jarJar("dev.xkmc.l2screentracker:l2screentracker:0.1.4") {
        transitive = false
        jarJar.ranged(it, "[0.1.4,)")
    })

    implementation fg.deobf(jarJar("dev.xkmc.l2modularblock:l2modularblock:1.1.0") {
        transitive = false
        jarJar.ranged(it, "[1.1.0,)")
    })

    implementation fg.deobf(jarJar("dev.xkmc.l2itemselector:l2itemselector:0.1.9") {
        transitive = false
        jarJar.ranged(it, "[0.1.9,)")
    })

    implementation fg.deobf("curse.maven:l2-backpack-620229:5821683")

    implementation fg.deobf("curse.maven:spice-of-life-carrot-edition-277616:4888575")
    implementation fg.deobf("curse.maven:spice-of-life-apple-pie-edition-704584:4596285")


    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
     compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
     compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
//     runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")


    // rei
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_forge}")
    implementation fg.deobf("curse.maven:architectury-api-419699:${architectury_api_id}")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    // emi
    // Forge (see below block as well if you use Forge Gradle)
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}:api")
    compileOnly fg.deobf("dev.emi:emi-forge:${emi_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version,
            forge_version       : forge_version,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
